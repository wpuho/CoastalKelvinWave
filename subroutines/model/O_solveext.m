function [elf,uaf,vaf,elb,eln,uab,uan,vab,van,d,ela,uwnd,vwnd]=O_solveext ...
                     (elb,eln,uab,uan,vab,van,d,                ...
                      h,dx,dy,dt,are,aru,arv,cor,fsm,dum,dvm,   ...
                      n,g,fnln,smoth,smol,nperx,npery,smagc,    ...
                      nadv,bndwe,bndsn)
%
[im,jm]=size(elb); imm1=im-1; jmm1=jm-1; dt2=2.*dt;
elf=zeros(im,jm); uaf=zeros(im,jm); vaf=zeros(im,jm);
advua=zeros(im,jm); advva=zeros(im,jm);
%
%-------uniform advection test--------Hump1D*Uni*.png and gif
%--uan(:,:)=10.*dum(:,:); uab=uan; uaf=uan;
%--van(:,:)=zeros(im,jm); vab=van; vaf=van;
%-------uniform advection test--------
%
%Horizontal viscosity coefficient = constant (if smagc<=0) or Smagorisnky:
aam(:,:)=-smagc*fsm(:,:);
if (smagc > 0.0); [aam]=O_horvis(smagc,dx,dy,uan,van,fsm); end;
%
%elevation:
wriv=zeros(im,jm);
if (smol ~= 0.0);
elb(:,:)=elb(:,:)+h(:,:); 
[elf]=O_advt2d(elb,h,smol,dx,dy,uan,van,are,aru,arv,  ...
                        fsm,dum,dvm,aam,wriv,dt2);
elf(:,:)=elf(:,:)-h(:,:); elb(:,:)=elb(:,:)-h(:,:);
else;
fluxua=zeros(im,jm); fluxva=zeros(im,jm);
fluxua(2:im,:)=0.25*(d(2:im,:)+d(1:imm1,:)).*(dy(2:im,:)+dy(1:imm1,:))  ...
                    .*uan(2:im,:);
fluxva(:,2:jm)=0.25*(d(:,2:jm)+d(:,1:jmm1)).*(dx(:,2:jm)+dx(:,1:jmm1))  ...
                    .*van(:,2:jm);
%Add Laplacian horizontal diffusive fluxes, purely for numerical smoothness
%  {note diffusion is based on Del^2(elb), i.e. not on Del^2(h+elb)}:
fluxua(2:im,:)=fluxua(2:im,:)-0.5e0*(aam(2:im,:)+aam(1:imm1,:))         ...
  .*(elb(2:im,:)-elb(1:imm1,:)).*dum(2:im,:).*(dy(2:im,:)+dy(1:imm1,:)) ...
  ./(dx(2:im,:)+dx(1:imm1,:));
fluxva(:,2:jm)=fluxva(:,2:jm)-0.5e0*(aam(:,2:jm)+aam(:,1:jmm1))         ...
  .*(elb(:,2:jm)-elb(:,1:jmm1)).*dvm(:,2:jm).*(dx(:,2:jm)+dx(:,1:jmm1)) ...
  ./(dy(:,2:jm)+dy(:,1:jmm1));
%Add net horizontal fluxes and step forward in time:
elf(1:imm1,1:jmm1) = elb(1:imm1,1:jmm1)+dt2*(                           ...
                         ( fluxua(1:imm1,1:jmm1)-fluxua(2:im,1:jmm1)    ...
                          +fluxva(1:imm1,1:jmm1)-fluxva(1:imm1,2:jm) )  ...
                        ./are(1:imm1,1:jmm1) + wriv(1:imm1,1:jmm1) );
%{
%Newtonian cooling = 1.e-7
elf(1:imm1,1:jmm1) = ( elb(1:imm1,1:jmm1)*(1-1.e-7*dt)                   ...
                   +dt2*(( fluxua(1:imm1,1:jmm1)-fluxua(2:im,1:jmm1)    ...
                          +fluxva(1:imm1,1:jmm1)-fluxva(1:imm1,2:jm) )  ...
                        ./are(1:imm1,1:jmm1) + wriv(1:imm1,1:jmm1) ) )  ...
                        /(1+1.e-7*dt);  
%}
end;
%
%elf boundary conditions:
[elf,uaf,vaf]=O_bc(1,elf,uaf,vaf,fsm,dum,dvm,n,dt,g,h,eln,nperx,npery, ...
                        bndwe,bndsn);
%
%-------uniform advection test--------
%--%{
%Specify time & spatial-dependent inverse barometer & wind stress vector:
[ela,wus,wvs,uwnd,vwnd]=O_surfforce(dx,dy,n,dt);
%
%{
cdb=zeros(im,jm); for i=1:im; cdb(i,:)=(1.-tanh((i-10)*0.1))*0.5; end; %figure(99); contourf(cdb);
%Bottom friction: (Use uaf & vaf as temporary arrays); 1.e-4=drag coeff
uaf(2:im,1:jmm1) =                                                      ...
           - cdb(2:im,1:jmm1).*sqrt(uab(2:im,1:jmm1).^2                 ...
           + (.25e0*(vab(2:im,1:jmm1)+vab(2:im,2:jm)                    ...               
           + vab(1:imm1,1:jmm1)+vab(1:imm1,2:jm))).^2).*uab(2:im,1:jmm1);
vaf(1:imm1,2:jm) =                                                      ...
           - cdb(1:imm1,2:jm).*sqrt(vab(1:imm1,2:jm).^2                 ...
           + (.25e0*(uab(1:imm1,2:jm)+uab(2:im,2:jm)                    ...               
           + uab(1:imm1,1:jmm1)+uab(2:im,1:jmm1))).^2).*vab(1:imm1,2:jm);
%
%}
%Calculate advection & viscosous fluxes every nadv times:
if (mod(n,nadv) == 0); O_advave; end;
%
%x-velocity:
%-RHS of equation (i.e. RHS brought to LHS; similarly for vaf below)
% (1-2*alpha)[d(eln)/dx]+(alpha)[d(elb)/dx+d(elf)/dx], alpha=0.225 is used
%   to improve stability; then smol~=0 w/dtcfl=1 is stabalized.
uaf(2:im,1:jmm1)=advua(2:im,1:jmm1)+                              ...
                 0.25*g*(d(2:im,1:jmm1)+d(1:imm1,1:jmm1))         ...
            .*(dy(2:im,1:jmm1)+dy(1:imm1,1:jmm1))                 ...
            .*(0.550*( eln(2:im,1:jmm1)-eln(1:imm1,1:jmm1) )      ...
            +  0.225*( elb(2:im,1:jmm1)-elb(1:imm1,1:jmm1)        ...
                      +elf(2:im,1:jmm1)-elf(1:imm1,1:jmm1) )      ...
                      -ela(2:im,1:jmm1)+ela(1:imm1,1:jmm1)  )     ...
            +aru(2:im,1:jmm1).*(wus(2:im,1:jmm1)-uaf(2:im,1:jmm1))...
    -0.25*aru(2:im,1:jmm1).*(cor(2:im,1:jmm1).*d(2:im,1:jmm1)     ...
                           .*(van(2:im,2:jm)+van(2:im,1:jmm1))    ...
                            +cor(1:imm1,1:jmm1).*d(1:imm1,1:jmm1) ...
                         .*(van(1:imm1,2:jm)+van(1:imm1,1:jmm1)));
%Time-stepping (note "-4.*dt*uaf = 4.*dt*RHS"):
uaf(2:im,1:jmm1)=( (h(2:im,1:jmm1)+elb(2:im,1:jmm1)*fnln          ...
                   +h(1:imm1,1:jmm1)+elb(1:imm1,1:jmm1)*fnln)     ...
                  .*aru(2:im,1:jmm1).*uab(2:im,1:jmm1)            ...
                  - 4.*dt*uaf(2:im,1:jmm1) )                      ...
                ./((h(2:im,1:jmm1)+elf(2:im,1:jmm1)*fnln          ...
                   +h(1:imm1,1:jmm1)+elf(1:imm1,1:jmm1)*fnln)     ...
                .*aru(2:im,1:jmm1));
%
%y-velocity:
% (1-2*alpha)[d(eln)/dy]+(alpha)[d(elb)/dy+d(elf)/dy], alpha=0.225 is used
%   to improve stability; then smol~=0 w/dtcfl=1 is stabalized.
vaf(1:imm1,2:jm)=advva(1:imm1,2:jm)+                              ...
                 0.25*g*(d(1:imm1,2:jm)+d(1:imm1,1:jmm1))         ...
            .*(dx(1:imm1,2:jm)+dx(1:imm1,1:jmm1))                 ...
            .*(0.550*( eln(1:imm1,2:jm)-eln(1:imm1,1:jmm1) )      ...
            +  0.225*( elb(1:imm1,2:jm)-elb(1:imm1,1:jmm1)        ...
                      +elf(1:imm1,2:jm)-elf(1:imm1,1:jmm1) )      ...
                      -ela(1:imm1,2:jm)+ela(1:imm1,1:jmm1)  )     ...
            +arv(1:imm1,2:jm).*(wvs(1:imm1,2:jm)-vaf(1:imm1,2:jm))...
   + 0.25*arv(1:imm1,2:jm).*(cor(1:imm1,2:jm).*d(1:imm1,2:jm)     ...
                           .*(uan(2:im,2:jm)+uan(1:imm1,2:jm))    ...
                            +cor(1:imm1,1:jmm1).*d(1:imm1,1:jmm1) ...
                         .*(uan(2:im,1:jmm1)+uan(1:imm1,1:jmm1)));
vaf(1:imm1,2:jm)=( (h(1:imm1,2:jm)+elb(1:imm1,2:jm)*fnln          ...
                   +h(1:imm1,1:jmm1)+elb(1:imm1,1:jmm1)*fnln)     ...
                  .*arv(1:imm1,2:jm).*vab(1:imm1,2:jm)            ...
                  - 4.*dt*vaf(1:imm1,2:jm) )                      ...
                ./((h(1:imm1,2:jm)+elf(1:imm1,2:jm)*fnln          ...
                   +h(1:imm1,1:jmm1)+elf(1:imm1,1:jmm1)*fnln)     ...
                .*arv(1:imm1,2:jm));
%
%uaf & vaf boundary conditions:
[elf,uaf,vaf]=O_bc(2,elf,uaf,vaf,fsm,dum,dvm,n,dt,g,h,eln,nperx,npery, ...
                        bndwe,bndsn);
%
%--%}
%-------uniform advection test--------
%
%Apply filter to remove time splitting:
uan(:,:)=uan(:,:)+0.5*smoth*(uab(:,:)-2.*uan(:,:)+uaf(:,:));
van(:,:)=van(:,:)+0.5*smoth*(vab(:,:)-2.*van(:,:)+vaf(:,:));
eln(:,:)=eln(:,:)+0.5*smoth*(elb(:,:)-2.*eln(:,:)+elf(:,:));
elb(:,:)=eln(:,:); uab(:,:)=uan(:,:); vab(:,:)=van(:,:);
eln(:,:)=elf(:,:); uan(:,:)=uaf(:,:); van(:,:)=vaf(:,:);
d(:,:)=h(:,:)+eln(:,:)*fnln;
%
%%
function O_advave
%
wrk=zeros(im,jm);
%Calculate advective flues --> fluxua & fluxva <-- to be coded
%Calculate viscous/diffusive fluxes:
%u-momentum part:
fluxua=zeros(im,jm); fluxva=zeros(im,jm); 
fluxua(1:imm1,:)=(fluxua(1:imm1,:)-2.0*d(1:imm1,:).*aam(1:imm1,:)       ...
         .*(uab(2:im,:)-uab(1:imm1,:))./dx(1:imm1,:)).*dy(1:imm1,:);
wrk(2:im,2:jm)=.25*(d(2:im,2:jm)+d(1:imm1,2:jm)+d(2:im,1:jmm1)          ...
  +d(1:imm1,1:jmm1)).*(aam(2:im,2:jm)  +aam(2:im,1:jmm1)                ...
                      +aam(1:imm1,2:jm)+aam(1:imm1,1:jmm1))             ...
  .*((uab(2:im,2:jm)-uab(2:im,1:jmm1))./(dy(2:im,2:jm)+dy(1:imm1,2:jm)  ...
                                    +dy(2:im,1:jmm1)+dy(1:imm1,1:jmm1)) ...
    +(vab(2:im,2:jm)-vab(1:imm1,2:jm))./(dx(2:im,2:jm)+dx(1:imm1,2:jm)  ...
                                    +dx(2:im,1:jmm1)+dx(1:imm1,1:jmm1)));
fluxva(2:im,2:jm)=.25*(fluxva(2:im,2:jm)-wrk(2:im,2:jm))                ...
  .*(dx(2:im,2:jm)+dx(1:imm1,2:jm)+dx(2:im,1:jmm1)+dx(1:imm1,1:jmm1));
advua(2:im,1:jmm1)= fluxua(2:im,1:jmm1)-fluxua(1:imm1,1:jmm1)           ...
                   +fluxva(2:im,2:jm)  -fluxva(2:im,1:jmm1);
%v-momentum part:
fluxua=zeros(im,jm); fluxva=zeros(im,jm); 
fluxva(:,1:jmm1)=(fluxva(:,1:jmm1)-2.0*d(:,1:jmm1).*aam(:,1:jmm1)       ...
         .*(vab(:,2:jm)-vab(:,1:jmm1))./dy(:,1:jmm1)).*dx(:,1:jmm1);
fluxua(2:im,2:jm)=.25*(fluxua(2:im,2:jm)-wrk(2:im,2:jm))                ...
  .*(dy(2:im,2:jm)+dy(1:imm1,2:jm)+dy(2:im,1:jmm1)+dy(1:imm1,1:jmm1));
advva(1:imm1,2:jm)= fluxua(2:im,2:jm)  -fluxua(1:imm1,2:jm)             ...
                   +fluxva(1:imm1,2:jm)-fluxva(1:imm1,1:jmm1);
end;
%
end


